## PERSONAL INFO
name: Fan Yang
nuid: 00-179-7661
email: yang.fan7@husky.neu.edu

name: Samkeet Shah
nuid: 00-125-8979
email: shah.sam@husky.neu.edu


## HIGH-LEVEL APPROACH

Initial call to the MyHTTP class get request with the input url.
We check for the application protocol to be http else error is thrown
We generate the headers for the request and call the custom HTTP function. 
The custom http function verifies the existence of hostname and initializes the custom TCP object. It tries to connect to the input host at the default port unless specified.
The `res_complete` method is used to ensure that the result received is complete, or fragments are yet to be recieved.

The MyTCP class contain connect method tries to resolve the input host name to it's IPv4 IP address then initializes the IP class with the given ip address. 
After sending the SYN request, the method verifies if the flag on the incoming request is SYN or ACK, else it logs an error.
By default the `send` and `sendall` method are alloted 3 retries.
The `sendall` initializes the windows size and sends data. If it successfully sends, it increases the size of the window. 
`_filter_packets` method is used to filter packets from the destination and for the given source.
`_calc_checksum` is used to calculate checksum for a given packet.


MyIP class construct IP packets i.e. at the network layer.
It initially calls the `_get_gateway` method, which calls executes the `route -n` command to getch the gateway ip address.
The MyIP class the sends an ARP request to the local gateway to get it's MAC address. 
Ethernet class is then instantiated with the mac address of the gateway.

The `_build_packet` method in all files is used to build a packet/frame for that layer/protocol.

The sockets for sending and receiving are initialized in the ethernet class.
The `IFNAME` is the name of the interface which is defined in the utils.py file.
The `_filter_packet` method in the ethernet class is used to filter incoming packets destined for the source machine.

The MyARP class is used to build a ARP packet to send an arp request to the local gateway, to fetch it's mac address. The filter packet method in this case is used to filter packets from the gateway. It is given 3 retries. 
The lookup method creates an ARP packet and passes the data to Ethernet class to send it over the sockets.

## CHALLENGES
1. Handle chunked http response
2. TCP checksum algorithm
3. Send/recv socket types (addr_family, type, protocol)
4. Checksum fails when bufsize for socket.recv() is smaller than packet size
5. Congestion window and socket timeout
6. Continuous ARP requests for destination IP address got no response
7. Finding the gateway IP
8. Verifying incoming ARP responses
9. Interfacing with Ethernet
10. Turn off checksum offloading

## TESTING
1. Enabling & Disabling checksum offload in TCP
2. Sending ARP request to gateway, destination
3. ran tester.py on 32/64 bits Ubuntu12 on VMWare

<WORK LOAD>
Fan Yang:
- HTTP, TCP, IP, ARP
- Auto testing script
- [Files] myhttp.py, mytcp.py, myip.py, tester.py

Samkeet Shah:
- IP, ARP, Ethernet
- Finding the Gateway IP and other network information
- [Files] myethernet.py, myarp.py

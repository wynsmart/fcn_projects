#!/bin/bash

src=$(pwd)
export PYTHONPATH=$src

# run main program
# sudo python -O "$src/main.py" "$@"

import socket
import sys
import ConfigParser
import struct
import utils


class MyDNS(object):

	def __init__(self, port):
		# TODO: check arguments. if port number is not given the assign random port from 40000-65535
		self.port = port
		# TODO: traceroute to get latest ip for cs5700cdnproject.ccs.neu.edu
		self.ip = 129.10.117.187
		self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		self.sock.bind((self.ip, self.port))

	def recvQuery(self):
		try:
			while True:
				query, addr = self.sock.recvfrom(2048)
				data = parseQuery(query)
				name, qry_id, rd, opcode = data.split(',')
				req_loc = getNearestReplica(req_ip)
		except Exception as e:
			raise e

	def _build_packet(self, query, query_id):
		'''The header for DNS queries and responses contains field/bits in the
		following diagram taken from [RFC 2136, 2535]:
									   1  1  1  1  1  1
		 0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
		|                      ID                       |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
		|QR|   Opcode  |AA|TC|RD|RA| Z|AD|CD|   RCODE   |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
		|                QDCOUNT/ZOCOUNT                |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
		|                ANCOUNT/PRCOUNT                |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
		|                NSCOUNT/UPCOUNT                |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
		|                    ARCOUNT                    |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

		The ID field identifies the query and is echoed in the response so
		they can be matched.
		'''

		# Header
		query_id = query_id
		flags = '\x81\x80'
		# qr = '\x01'
		# opcode = opcode
		# aa = '\x01'
		# tc = '\x00'
		# rd = rd
		# ra = '\x00'
		# z = '\x00'
		# # ad
		# # cd
		# if opcode != '\x00':
		# 	rcode = '\x04'
		# elif name != 'cs5700cdn.example.com':
		# 	rcode = '\x03'
		# else:
		# 	rcode = '\x00'
		qdcount = '\x01'
		ancount = '\x01'
		nscount = '\x00'
		arcount = '\x00'

		# Answer
		name = 'cs5700cdn.example.com'
		rec_type = '\x01'
		rec_class = '\x00\x01'
		ttl = '\x00'
		rdlen = 16
		rd = '128.00.110.00'
		answer = name+rec_type+rec_class+ttl+rdlen+rd

		# Authority
		auth = '\x00'

		# Additional
		addntl = '\x00'

		result = struct.pack(query_id+flags+qdcount+ancount+nscount+arcount+answer+auth+addntl)
		return result

	def parseQUery(self, data):
		packet = struct.unpack('!B', data)

	def send(self, packet):
		self.sock.sendall(packet)


if __name__ == '__main__':
	MyDNS()